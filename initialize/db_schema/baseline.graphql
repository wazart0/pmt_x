enum PredecessorType {
    FS
    SF
    FF
    SS
}

type Predecessor @generate (
    query: {
        get: false,
        query: true,
        aggregate: true
    },
    mutation: {
        add: false,
        delete: false
    },
    subscription: false
) {
    type: PredecessorType!
    project: ProjectBaseline!
}

type ProjectBaseline @generate (
    query: {
        get: true,
        query: true,
        aggregate: true
    },
    mutation: {
        add: true,
        delete: true
    },
    subscription: false
) {
    id: ID!
    project: Project!
    baseline: Baseline! 

	start: DateTime
    finish: DateTime
    worktime: String

    wbs: String

    parent: ProjectBaseline
    children: [ProjectBaseline] @hasInverse(field: parent)
    predecessors: [Predecessor]
}

type ResourceBaseline @generate (
    query: {
        get: true,
        query: true,
        aggregate: true
    },
    mutation: {
        add: true,
        delete: true
    },
    subscription: false
) {
    id: ID!
    project: Project!
    baseline: Baseline!
    # resource: Resource!
    resource: Int!

	start: DateTime
    finish: DateTime
    worktime: String
}

type Baseline @generate (
    query: {
        get: true,
        query: true,
        aggregate: true
    },
    mutation: {
        add: true,
        delete: true
    },
    subscription: true
) {
	id: ID!
	name: String! @search
	description: String
	
    root: Project!
    projects: [ProjectBaseline] @hasInverse(field: baseline)
    resources: [ResourceBaseline] @hasInverse(field: baseline)
} 
