/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AutoAllocation
 */
export interface AutoAllocation {
}
/**
 * 
 * @export
 * @interface AutoAllocation1
 */
export interface AutoAllocation1 {
}
/**
 * 
 * @export
 * @interface Availability
 */
export interface Availability {
}
/**
 * 
 * @export
 * @interface BaselineCreate
 */
export interface BaselineCreate {
    /**
     * 
     * @type {string}
     * @memberof BaselineCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BaselineCreate
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof BaselineCreate
     */
    'doc'?: object;
}
/**
 * 
 * @export
 * @interface BaselineRead
 */
export interface BaselineRead {
    /**
     * 
     * @type {string}
     * @memberof BaselineRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof BaselineRead
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof BaselineRead
     */
    'doc'?: object;
    /**
     * 
     * @type {string}
     * @memberof BaselineRead
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof BaselineRead
     */
    'created_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof BaselineRead
     */
    'updated_timestamp'?: string;
}
/**
 * 
 * @export
 * @interface BaselineTaskCreate
 */
export interface BaselineTaskCreate {
    /**
     * 
     * @type {Duration}
     * @memberof BaselineTaskCreate
     */
    'duration'?: Duration;
    /**
     * 
     * @type {Parent}
     * @memberof BaselineTaskCreate
     */
    'parent': Parent;
    /**
     * 
     * @type {Start}
     * @memberof BaselineTaskCreate
     */
    'start': Start;
    /**
     * 
     * @type {Finish}
     * @memberof BaselineTaskCreate
     */
    'finish': Finish;
    /**
     * 
     * @type {AutoAllocation}
     * @memberof BaselineTaskCreate
     */
    'auto_allocation'?: AutoAllocation;
    /**
     * 
     * @type {Doc}
     * @memberof BaselineTaskCreate
     */
    'doc'?: Doc;
}
/**
 * 
 * @export
 * @interface BaselineTaskPredecessorCreate
 */
export interface BaselineTaskPredecessorCreate {
    /**
     * 
     * @type {string}
     * @memberof BaselineTaskPredecessorCreate
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface BaselineTaskPredecessorRead
 */
export interface BaselineTaskPredecessorRead {
    /**
     * 
     * @type {string}
     * @memberof BaselineTaskPredecessorRead
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof BaselineTaskPredecessorRead
     */
    'baseline_id': string;
    /**
     * 
     * @type {string}
     * @memberof BaselineTaskPredecessorRead
     */
    'task_id': string;
    /**
     * 
     * @type {string}
     * @memberof BaselineTaskPredecessorRead
     */
    'predecessor_id': string;
    /**
     * 
     * @type {object}
     * @memberof BaselineTaskPredecessorRead
     */
    'validation': object;
}
/**
 * 
 * @export
 * @interface BaselineTaskRead
 */
export interface BaselineTaskRead {
    /**
     * 
     * @type {Duration}
     * @memberof BaselineTaskRead
     */
    'duration'?: Duration;
    /**
     * 
     * @type {Parent}
     * @memberof BaselineTaskRead
     */
    'parent': Parent;
    /**
     * 
     * @type {Start}
     * @memberof BaselineTaskRead
     */
    'start': Start;
    /**
     * 
     * @type {Finish}
     * @memberof BaselineTaskRead
     */
    'finish': Finish;
    /**
     * 
     * @type {AutoAllocation}
     * @memberof BaselineTaskRead
     */
    'auto_allocation'?: AutoAllocation;
    /**
     * 
     * @type {Doc}
     * @memberof BaselineTaskRead
     */
    'doc'?: Doc;
    /**
     * 
     * @type {string}
     * @memberof BaselineTaskRead
     */
    'baseline_id': string;
    /**
     * 
     * @type {string}
     * @memberof BaselineTaskRead
     */
    'task_id': string;
    /**
     * 
     * @type {object}
     * @memberof BaselineTaskRead
     */
    'validation': object;
}
/**
 * 
 * @export
 * @interface BaselineTaskUpdate
 */
export interface BaselineTaskUpdate {
    /**
     * 
     * @type {Duration1}
     * @memberof BaselineTaskUpdate
     */
    'duration'?: Duration1;
    /**
     * 
     * @type {Parent}
     * @memberof BaselineTaskUpdate
     */
    'parent'?: Parent;
    /**
     * 
     * @type {Start}
     * @memberof BaselineTaskUpdate
     */
    'start'?: Start;
    /**
     * 
     * @type {Finish}
     * @memberof BaselineTaskUpdate
     */
    'finish'?: Finish;
    /**
     * 
     * @type {AutoAllocation1}
     * @memberof BaselineTaskUpdate
     */
    'auto_allocation'?: AutoAllocation1;
    /**
     * 
     * @type {Doc1}
     * @memberof BaselineTaskUpdate
     */
    'doc'?: Doc1;
}
/**
 * 
 * @export
 * @interface BaselineUpdate
 */
export interface BaselineUpdate {
    /**
     * 
     * @type {Name}
     * @memberof BaselineUpdate
     */
    'name'?: Name;
    /**
     * 
     * @type {Description}
     * @memberof BaselineUpdate
     */
    'description'?: Description;
    /**
     * 
     * @type {Tasks}
     * @memberof BaselineUpdate
     */
    'tasks'?: Tasks;
    /**
     * 
     * @type {Doc1}
     * @memberof BaselineUpdate
     */
    'doc'?: Doc1;
}
/**
 * 
 * @export
 * @interface ClientId
 */
export interface ClientId {
}
/**
 * 
 * @export
 * @interface ClientSecret
 */
export interface ClientSecret {
}
/**
 * 
 * @export
 * @interface Description
 */
export interface Description {
}
/**
 * 
 * @export
 * @interface Doc
 */
export interface Doc {
}
/**
 * 
 * @export
 * @interface Doc1
 */
export interface Doc1 {
}
/**
 * 
 * @export
 * @interface Duration
 */
export interface Duration {
}
/**
 * 
 * @export
 * @interface Duration1
 */
export interface Duration1 {
}
/**
 * 
 * @export
 * @interface Filter
 */
export interface Filter {
}
/**
 * 
 * @export
 * @interface Finish
 */
export interface Finish {
}
/**
 * 
 * @export
 * @interface GrantType
 */
export interface GrantType {
}
/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * 
 * @export
 * @interface Name
 */
export interface Name {
}
/**
 * 
 * @export
 * @interface Parent
 */
export interface Parent {
}
/**
 * 
 * @export
 * @interface Password
 */
export interface Password {
}
/**
 * 
 * @export
 * @interface ResourceCreate
 */
export interface ResourceCreate {
    /**
     * 
     * @type {string}
     * @memberof ResourceCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ResourceCreate
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ResourceCreate
     */
    'availability': string;
    /**
     * 
     * @type {object}
     * @memberof ResourceCreate
     */
    'doc'?: object;
}
/**
 * 
 * @export
 * @interface ResourceRead
 */
export interface ResourceRead {
    /**
     * 
     * @type {string}
     * @memberof ResourceRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRead
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRead
     */
    'availability': string;
    /**
     * 
     * @type {object}
     * @memberof ResourceRead
     */
    'doc'?: object;
    /**
     * 
     * @type {string}
     * @memberof ResourceRead
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRead
     */
    'created_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ResourceRead
     */
    'updated_timestamp'?: string;
}
/**
 * 
 * @export
 * @interface ResourceUpdate
 */
export interface ResourceUpdate {
    /**
     * 
     * @type {Name}
     * @memberof ResourceUpdate
     */
    'name'?: Name;
    /**
     * 
     * @type {Description}
     * @memberof ResourceUpdate
     */
    'description'?: Description;
    /**
     * 
     * @type {Type}
     * @memberof ResourceUpdate
     */
    'type': Type;
    /**
     * 
     * @type {Availability}
     * @memberof ResourceUpdate
     */
    'availability': Availability;
    /**
     * 
     * @type {Doc1}
     * @memberof ResourceUpdate
     */
    'doc'?: Doc1;
}
/**
 * 
 * @export
 * @interface Start
 */
export interface Start {
}
/**
 * 
 * @export
 * @interface TaskCreate
 */
export interface TaskCreate {
    /**
     * 
     * @type {string}
     * @memberof TaskCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaskCreate
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof TaskCreate
     */
    'doc'?: object;
}
/**
 * 
 * @export
 * @interface TaskId
 */
export interface TaskId {
}
/**
 * 
 * @export
 * @interface TaskRead
 */
export interface TaskRead {
    /**
     * 
     * @type {string}
     * @memberof TaskRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof TaskRead
     */
    'description': string;
    /**
     * 
     * @type {object}
     * @memberof TaskRead
     */
    'doc'?: object;
    /**
     * 
     * @type {string}
     * @memberof TaskRead
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRead
     */
    'created_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof TaskRead
     */
    'updated_timestamp'?: string;
}
/**
 * 
 * @export
 * @interface TaskUpdate
 */
export interface TaskUpdate {
    /**
     * 
     * @type {Name}
     * @memberof TaskUpdate
     */
    'name'?: Name;
    /**
     * 
     * @type {Description}
     * @memberof TaskUpdate
     */
    'description'?: Description;
    /**
     * 
     * @type {Doc1}
     * @memberof TaskUpdate
     */
    'doc'?: Doc1;
}
/**
 * 
 * @export
 * @interface Tasks
 */
export interface Tasks {
}
/**
 * 
 * @export
 * @interface Timestamp
 */
export interface Timestamp {
}
/**
 * 
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'token_type'?: string;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    'access_token'?: string;
}
/**
 * 
 * @export
 * @interface Type
 */
export interface Type {
}
/**
 * 
 * @export
 * @interface UserCreate
 */
export interface UserCreate {
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserCreate
     */
    'password': string;
}
/**
 * 
 * @export
 * @interface UserRead
 */
export interface UserRead {
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'username': string;
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'created_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof UserRead
     */
    'updated_timestamp'?: string;
}
/**
 * 
 * @export
 * @interface UserUpdate
 */
export interface UserUpdate {
    /**
     * 
     * @type {Name}
     * @memberof UserUpdate
     */
    'name'?: Name;
    /**
     * 
     * @type {Username}
     * @memberof UserUpdate
     */
    'username'?: Username;
    /**
     * 
     * @type {Password}
     * @memberof UserUpdate
     */
    'password'?: Password;
}
/**
 * 
 * @export
 * @interface Username
 */
export interface Username {
}
/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}
/**
 * 
 * @export
 * @interface ViewCreate
 */
export interface ViewCreate {
    /**
     * 
     * @type {string}
     * @memberof ViewCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ViewCreate
     */
    'filter': string;
    /**
     * 
     * @type {object}
     * @memberof ViewCreate
     */
    'doc'?: object;
}
/**
 * 
 * @export
 * @interface ViewRead
 */
export interface ViewRead {
    /**
     * 
     * @type {string}
     * @memberof ViewRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ViewRead
     */
    'filter': string;
    /**
     * 
     * @type {object}
     * @memberof ViewRead
     */
    'doc'?: object;
    /**
     * 
     * @type {string}
     * @memberof ViewRead
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ViewRead
     */
    'created_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof ViewRead
     */
    'updated_timestamp'?: string;
}
/**
 * 
 * @export
 * @interface ViewUpdate
 */
export interface ViewUpdate {
    /**
     * 
     * @type {Name}
     * @memberof ViewUpdate
     */
    'name'?: Name;
    /**
     * 
     * @type {Description}
     * @memberof ViewUpdate
     */
    'description'?: Description;
    /**
     * 
     * @type {Filter}
     * @memberof ViewUpdate
     */
    'filter'?: Filter;
    /**
     * 
     * @type {Doc1}
     * @memberof ViewUpdate
     */
    'doc'?: Doc1;
}
/**
 * 
 * @export
 * @interface WorklogCreate
 */
export interface WorklogCreate {
    /**
     * 
     * @type {string}
     * @memberof WorklogCreate
     */
    'task_id': string;
    /**
     * 
     * @type {string}
     * @memberof WorklogCreate
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorklogCreate
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorklogCreate
     */
    'timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof WorklogCreate
     */
    'duration': string;
    /**
     * 
     * @type {object}
     * @memberof WorklogCreate
     */
    'doc'?: object;
}
/**
 * 
 * @export
 * @interface WorklogRead
 */
export interface WorklogRead {
    /**
     * 
     * @type {string}
     * @memberof WorklogRead
     */
    'task_id': string;
    /**
     * 
     * @type {string}
     * @memberof WorklogRead
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof WorklogRead
     */
    'description'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorklogRead
     */
    'timestamp': string;
    /**
     * 
     * @type {string}
     * @memberof WorklogRead
     */
    'duration': string;
    /**
     * 
     * @type {object}
     * @memberof WorklogRead
     */
    'doc'?: object;
    /**
     * 
     * @type {string}
     * @memberof WorklogRead
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorklogRead
     */
    'created_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorklogRead
     */
    'updated_timestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof WorklogRead
     */
    'user_id': string;
}
/**
 * 
 * @export
 * @interface WorklogUpdate
 */
export interface WorklogUpdate {
    /**
     * 
     * @type {TaskId}
     * @memberof WorklogUpdate
     */
    'task_id'?: TaskId;
    /**
     * 
     * @type {Name}
     * @memberof WorklogUpdate
     */
    'name'?: Name;
    /**
     * 
     * @type {Description}
     * @memberof WorklogUpdate
     */
    'description'?: Description;
    /**
     * 
     * @type {Timestamp}
     * @memberof WorklogUpdate
     */
    'timestamp'?: Timestamp;
    /**
     * 
     * @type {Duration1}
     * @memberof WorklogUpdate
     */
    'duration'?: Duration1;
    /**
     * 
     * @type {Doc1}
     * @memberof WorklogUpdate
     */
    'doc'?: Doc1;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create Baseline
         * @param {BaselineCreate} baselineCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaselineSharespaceBaselinePost: async (baselineCreate: BaselineCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineCreate' is not null or undefined
            assertParamExists('createBaselineSharespaceBaselinePost', 'baselineCreate', baselineCreate)
            const localVarPath = `/sharespace/baseline`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baselineCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Baseline Task Predecessor
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {string} predecessorId 
         * @param {BaselineTaskPredecessorCreate} baselineTaskPredecessorCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost: async (baselineId: string, taskId: string, predecessorId: string, baselineTaskPredecessorCreate: BaselineTaskPredecessorCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost', 'baselineId', baselineId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost', 'taskId', taskId)
            // verify required parameter 'predecessorId' is not null or undefined
            assertParamExists('createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost', 'predecessorId', predecessorId)
            // verify required parameter 'baselineTaskPredecessorCreate' is not null or undefined
            assertParamExists('createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost', 'baselineTaskPredecessorCreate', baselineTaskPredecessorCreate)
            const localVarPath = `/sharespace/baseline/{baseline_id}/task/{task_id}/predecessor/{predecessor_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"predecessor_id"}}`, encodeURIComponent(String(predecessorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baselineTaskPredecessorCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Baseline Task
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {BaselineTaskCreate} baselineTaskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost: async (baselineId: string, taskId: string, baselineTaskCreate: BaselineTaskCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost', 'baselineId', baselineId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost', 'taskId', taskId)
            // verify required parameter 'baselineTaskCreate' is not null or undefined
            assertParamExists('createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost', 'baselineTaskCreate', baselineTaskCreate)
            const localVarPath = `/sharespace/baseline/{baseline_id}/task/{task_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baselineTaskCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Resource
         * @param {ResourceCreate} resourceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceSharespaceResourcePost: async (resourceCreate: ResourceCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'resourceCreate' is not null or undefined
            assertParamExists('createResourceSharespaceResourcePost', 'resourceCreate', resourceCreate)
            const localVarPath = `/sharespace/resource`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Task
         * @param {TaskCreate} taskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskSharespaceTaskPost: async (taskCreate: TaskCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskCreate' is not null or undefined
            assertParamExists('createTaskSharespaceTaskPost', 'taskCreate', taskCreate)
            const localVarPath = `/sharespace/task`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Token
         * @param {string} username 
         * @param {string} password 
         * @param {GrantType} [grantType] 
         * @param {string} [scope] 
         * @param {ClientId} [clientId] 
         * @param {ClientSecret} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTokenTokenPost: async (username: string, password: string, grantType?: GrantType, scope?: string, clientId?: ClientId, clientSecret?: ClientSecret, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'username' is not null or undefined
            assertParamExists('createTokenTokenPost', 'username', username)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('createTokenTokenPost', 'password', password)
            const localVarPath = `/token`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (grantType !== undefined) { 
                localVarFormParams.set('grant_type', grantType as any);
            }
    
            if (username !== undefined) { 
                localVarFormParams.set('username', username as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.set('password', password as any);
            }
    
            if (scope !== undefined) { 
                localVarFormParams.set('scope', scope as any);
            }
    
            if (clientId !== undefined) { 
                localVarFormParams.set('client_id', clientId as any);
            }
    
            if (clientSecret !== undefined) { 
                localVarFormParams.set('client_secret', clientSecret as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUserPost: async (userCreate: UserCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userCreate' is not null or undefined
            assertParamExists('createUserUserPost', 'userCreate', userCreate)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create View
         * @param {ViewCreate} viewCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createViewSharespaceViewPost: async (viewCreate: ViewCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'viewCreate' is not null or undefined
            assertParamExists('createViewSharespaceViewPost', 'viewCreate', viewCreate)
            const localVarPath = `/sharespace/view`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(viewCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Worklog
         * @param {WorklogCreate} worklogCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorklogSharespaceWorklogPost: async (worklogCreate: WorklogCreate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'worklogCreate' is not null or undefined
            assertParamExists('createWorklogSharespaceWorklogPost', 'worklogCreate', worklogCreate)
            const localVarPath = `/sharespace/worklog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(worklogCreate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Delete Baseline Task Predecessor
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {string} predecessorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete: async (baselineId: string, taskId: string, predecessorId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete', 'baselineId', baselineId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete', 'taskId', taskId)
            // verify required parameter 'predecessorId' is not null or undefined
            assertParamExists('deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete', 'predecessorId', predecessorId)
            const localVarPath = `/sharespace/baseline/{baseline_id}/task/{task_id}/predecessor/{predecessor_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"predecessor_id"}}`, encodeURIComponent(String(predecessorId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Baseline Predecessors
         * @param {string} baselineId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselinePredecessorsSharespaceBaselineBaselineIdPredecessorsGet: async (baselineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('getBaselinePredecessorsSharespaceBaselineBaselineIdPredecessorsGet', 'baselineId', baselineId)
            const localVarPath = `/sharespace/baseline/{baseline_id}/predecessors`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Baseline
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselineSharespaceBaselineIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getBaselineSharespaceBaselineIdGet', 'id', id)
            const localVarPath = `/sharespace/baseline/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Baseline Task
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet: async (baselineId: string, taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet', 'baselineId', baselineId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet', 'taskId', taskId)
            const localVarPath = `/sharespace/baseline/{baseline_id}/task/{task_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Baseline Tasks
         * @param {string} baselineId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselineTasksSharespaceBaselineBaselineIdTasksGet: async (baselineId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('getBaselineTasksSharespaceBaselineBaselineIdTasksGet', 'baselineId', baselineId)
            const localVarPath = `/sharespace/baseline/{baseline_id}/tasks`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Baselines
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselinesSharespaceBaselinesGet: async (orderBy?: string, desc?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sharespace/baselines`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceSharespaceResourceIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getResourceSharespaceResourceIdGet', 'id', id)
            const localVarPath = `/sharespace/resource/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Resources
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcesSharespaceResourcesGet: async (orderBy?: string, desc?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sharespace/resources`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Task
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskSharespaceTaskIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getTaskSharespaceTaskIdGet', 'id', id)
            const localVarPath = `/sharespace/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Tasks
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksSharespaceTasksGet: async (orderBy?: string, desc?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sharespace/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUserGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUsersGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get View
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewSharespaceViewIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getViewSharespaceViewIdGet', 'id', id)
            const localVarPath = `/sharespace/view/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Views
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewsSharespaceViewsGet: async (orderBy?: string, desc?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sharespace/views`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Worklog
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorklogSharespaceWorklogIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('getWorklogSharespaceWorklogIdGet', 'id', id)
            const localVarPath = `/sharespace/worklog/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get Worklogs
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorklogsSharespaceWorklogsGet: async (orderBy?: string, desc?: boolean, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sharespace/worklogs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)

            if (orderBy !== undefined) {
                localVarQueryParameter['order_by'] = orderBy;
            }

            if (desc !== undefined) {
                localVarQueryParameter['desc'] = desc;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/health`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch Baseline
         * @param {string} id 
         * @param {BaselineUpdate} baselineUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBaselineSharespaceBaselineIdPatch: async (id: string, baselineUpdate: BaselineUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchBaselineSharespaceBaselineIdPatch', 'id', id)
            // verify required parameter 'baselineUpdate' is not null or undefined
            assertParamExists('patchBaselineSharespaceBaselineIdPatch', 'baselineUpdate', baselineUpdate)
            const localVarPath = `/sharespace/baseline/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baselineUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch Baseline Task
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {BaselineTaskUpdate} baselineTaskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch: async (baselineId: string, taskId: string, baselineTaskUpdate: BaselineTaskUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'baselineId' is not null or undefined
            assertParamExists('patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch', 'baselineId', baselineId)
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch', 'taskId', taskId)
            // verify required parameter 'baselineTaskUpdate' is not null or undefined
            assertParamExists('patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch', 'baselineTaskUpdate', baselineTaskUpdate)
            const localVarPath = `/sharespace/baseline/{baseline_id}/task/{task_id}`
                .replace(`{${"baseline_id"}}`, encodeURIComponent(String(baselineId)))
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(baselineTaskUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch Resource
         * @param {string} id 
         * @param {ResourceUpdate} resourceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceSharespaceResourceIdPatch: async (id: string, resourceUpdate: ResourceUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchResourceSharespaceResourceIdPatch', 'id', id)
            // verify required parameter 'resourceUpdate' is not null or undefined
            assertParamExists('patchResourceSharespaceResourceIdPatch', 'resourceUpdate', resourceUpdate)
            const localVarPath = `/sharespace/resource/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(resourceUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch Task
         * @param {string} id 
         * @param {TaskUpdate} taskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTaskSharespaceTaskIdPatch: async (id: string, taskUpdate: TaskUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchTaskSharespaceTaskIdPatch', 'id', id)
            // verify required parameter 'taskUpdate' is not null or undefined
            assertParamExists('patchTaskSharespaceTaskIdPatch', 'taskUpdate', taskUpdate)
            const localVarPath = `/sharespace/task/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(taskUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch User
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserUserPatch: async (userUpdate: UserUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userUpdate' is not null or undefined
            assertParamExists('patchUserUserPatch', 'userUpdate', userUpdate)
            const localVarPath = `/user`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch View
         * @param {string} id 
         * @param {ViewUpdate} viewUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchViewSharespaceViewIdPatch: async (id: string, viewUpdate: ViewUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchViewSharespaceViewIdPatch', 'id', id)
            // verify required parameter 'viewUpdate' is not null or undefined
            assertParamExists('patchViewSharespaceViewIdPatch', 'viewUpdate', viewUpdate)
            const localVarPath = `/sharespace/view/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(viewUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Patch Worklog
         * @param {string} id 
         * @param {WorklogUpdate} worklogUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorklogSharespaceWorklogIdPatch: async (id: string, worklogUpdate: WorklogUpdate, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('patchWorklogSharespaceWorklogIdPatch', 'id', id)
            // verify required parameter 'worklogUpdate' is not null or undefined
            assertParamExists('patchWorklogSharespaceWorklogIdPatch', 'worklogUpdate', worklogUpdate)
            const localVarPath = `/sharespace/worklog/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication OAuth2PasswordBearer required
            // oauth required
            await setOAuthToObject(localVarHeaderParameter, "OAuth2PasswordBearer", [], configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(worklogUpdate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create Baseline
         * @param {BaselineCreate} baselineCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBaselineSharespaceBaselinePost(baselineCreate: BaselineCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaselineRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBaselineSharespaceBaselinePost(baselineCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBaselineSharespaceBaselinePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Baseline Task Predecessor
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {string} predecessorId 
         * @param {BaselineTaskPredecessorCreate} baselineTaskPredecessorCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost(baselineId: string, taskId: string, predecessorId: string, baselineTaskPredecessorCreate: BaselineTaskPredecessorCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaselineTaskPredecessorRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost(baselineId, taskId, predecessorId, baselineTaskPredecessorCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Baseline Task
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {BaselineTaskCreate} baselineTaskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost(baselineId: string, taskId: string, baselineTaskCreate: BaselineTaskCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaselineTaskRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost(baselineId, taskId, baselineTaskCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Resource
         * @param {ResourceCreate} resourceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createResourceSharespaceResourcePost(resourceCreate: ResourceCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createResourceSharespaceResourcePost(resourceCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createResourceSharespaceResourcePost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Task
         * @param {TaskCreate} taskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTaskSharespaceTaskPost(taskCreate: TaskCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTaskSharespaceTaskPost(taskCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTaskSharespaceTaskPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Token
         * @param {string} username 
         * @param {string} password 
         * @param {GrantType} [grantType] 
         * @param {string} [scope] 
         * @param {ClientId} [clientId] 
         * @param {ClientSecret} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTokenTokenPost(username: string, password: string, grantType?: GrantType, scope?: string, clientId?: ClientId, clientSecret?: ClientSecret, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Token>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createTokenTokenPost(username, password, grantType, scope, clientId, clientSecret, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createTokenTokenPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createUserUserPost(userCreate: UserCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createUserUserPost(userCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createUserUserPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create View
         * @param {ViewCreate} viewCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createViewSharespaceViewPost(viewCreate: ViewCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createViewSharespaceViewPost(viewCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createViewSharespaceViewPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Worklog
         * @param {WorklogCreate} worklogCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createWorklogSharespaceWorklogPost(worklogCreate: WorklogCreate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorklogRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createWorklogSharespaceWorklogPost(worklogCreate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.createWorklogSharespaceWorklogPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Delete Baseline Task Predecessor
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {string} predecessorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete(baselineId: string, taskId: string, predecessorId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete(baselineId, taskId, predecessorId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Baseline Predecessors
         * @param {string} baselineId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBaselinePredecessorsSharespaceBaselineBaselineIdPredecessorsGet(baselineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BaselineTaskPredecessorRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBaselinePredecessorsSharespaceBaselineBaselineIdPredecessorsGet(baselineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBaselinePredecessorsSharespaceBaselineBaselineIdPredecessorsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Baseline
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBaselineSharespaceBaselineIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaselineRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBaselineSharespaceBaselineIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBaselineSharespaceBaselineIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Baseline Task
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet(baselineId: string, taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaselineTaskRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet(baselineId, taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Baseline Tasks
         * @param {string} baselineId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBaselineTasksSharespaceBaselineBaselineIdTasksGet(baselineId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BaselineTaskRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBaselineTasksSharespaceBaselineBaselineIdTasksGet(baselineId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBaselineTasksSharespaceBaselineBaselineIdTasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Baselines
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBaselinesSharespaceBaselinesGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<BaselineRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getBaselinesSharespaceBaselinesGet(orderBy, desc, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getBaselinesSharespaceBaselinesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourceSharespaceResourceIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourceSharespaceResourceIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getResourceSharespaceResourceIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Resources
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getResourcesSharespaceResourcesGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ResourceRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getResourcesSharespaceResourcesGet(orderBy, desc, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getResourcesSharespaceResourcesGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Task
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskSharespaceTaskIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskSharespaceTaskIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTaskSharespaceTaskIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Tasks
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTasksSharespaceTasksGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TaskRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTasksSharespaceTasksGet(orderBy, desc, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTasksSharespaceTasksGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUserUserGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUserUserGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUserUserGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUsersUsersGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUsersUsersGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getUsersUsersGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get View
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getViewSharespaceViewIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getViewSharespaceViewIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getViewSharespaceViewIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Views
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getViewsSharespaceViewsGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ViewRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getViewsSharespaceViewsGet(orderBy, desc, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getViewsSharespaceViewsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Worklog
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorklogSharespaceWorklogIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorklogRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorklogSharespaceWorklogIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorklogSharespaceWorklogIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Get Worklogs
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWorklogsSharespaceWorklogsGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<WorklogRead>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getWorklogsSharespaceWorklogsGet(orderBy, desc, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getWorklogsSharespaceWorklogsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async healthHealthGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.healthHealthGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.healthHealthGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch Baseline
         * @param {string} id 
         * @param {BaselineUpdate} baselineUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBaselineSharespaceBaselineIdPatch(id: string, baselineUpdate: BaselineUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaselineRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBaselineSharespaceBaselineIdPatch(id, baselineUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchBaselineSharespaceBaselineIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch Baseline Task
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {BaselineTaskUpdate} baselineTaskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch(baselineId: string, taskId: string, baselineTaskUpdate: BaselineTaskUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BaselineTaskRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch(baselineId, taskId, baselineTaskUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch Resource
         * @param {string} id 
         * @param {ResourceUpdate} resourceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchResourceSharespaceResourceIdPatch(id: string, resourceUpdate: ResourceUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchResourceSharespaceResourceIdPatch(id, resourceUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchResourceSharespaceResourceIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch Task
         * @param {string} id 
         * @param {TaskUpdate} taskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchTaskSharespaceTaskIdPatch(id: string, taskUpdate: TaskUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchTaskSharespaceTaskIdPatch(id, taskUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchTaskSharespaceTaskIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch User
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchUserUserPatch(userUpdate: UserUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchUserUserPatch(userUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchUserUserPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch View
         * @param {string} id 
         * @param {ViewUpdate} viewUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchViewSharespaceViewIdPatch(id: string, viewUpdate: ViewUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ViewRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchViewSharespaceViewIdPatch(id, viewUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchViewSharespaceViewIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Patch Worklog
         * @param {string} id 
         * @param {WorklogUpdate} worklogUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async patchWorklogSharespaceWorklogIdPatch(id: string, worklogUpdate: WorklogUpdate, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<WorklogRead>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.patchWorklogSharespaceWorklogIdPatch(id, worklogUpdate, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.patchWorklogSharespaceWorklogIdPatch']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Create Baseline
         * @param {BaselineCreate} baselineCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaselineSharespaceBaselinePost(baselineCreate: BaselineCreate, options?: any): AxiosPromise<BaselineRead> {
            return localVarFp.createBaselineSharespaceBaselinePost(baselineCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Baseline Task Predecessor
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {string} predecessorId 
         * @param {BaselineTaskPredecessorCreate} baselineTaskPredecessorCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost(baselineId: string, taskId: string, predecessorId: string, baselineTaskPredecessorCreate: BaselineTaskPredecessorCreate, options?: any): AxiosPromise<BaselineTaskPredecessorRead> {
            return localVarFp.createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost(baselineId, taskId, predecessorId, baselineTaskPredecessorCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Baseline Task
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {BaselineTaskCreate} baselineTaskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost(baselineId: string, taskId: string, baselineTaskCreate: BaselineTaskCreate, options?: any): AxiosPromise<BaselineTaskRead> {
            return localVarFp.createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost(baselineId, taskId, baselineTaskCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Resource
         * @param {ResourceCreate} resourceCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createResourceSharespaceResourcePost(resourceCreate: ResourceCreate, options?: any): AxiosPromise<ResourceRead> {
            return localVarFp.createResourceSharespaceResourcePost(resourceCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Task
         * @param {TaskCreate} taskCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTaskSharespaceTaskPost(taskCreate: TaskCreate, options?: any): AxiosPromise<TaskRead> {
            return localVarFp.createTaskSharespaceTaskPost(taskCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Token
         * @param {string} username 
         * @param {string} password 
         * @param {GrantType} [grantType] 
         * @param {string} [scope] 
         * @param {ClientId} [clientId] 
         * @param {ClientSecret} [clientSecret] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTokenTokenPost(username: string, password: string, grantType?: GrantType, scope?: string, clientId?: ClientId, clientSecret?: ClientSecret, options?: any): AxiosPromise<Token> {
            return localVarFp.createTokenTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create User
         * @param {UserCreate} userCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createUserUserPost(userCreate: UserCreate, options?: any): AxiosPromise<UserRead> {
            return localVarFp.createUserUserPost(userCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create View
         * @param {ViewCreate} viewCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createViewSharespaceViewPost(viewCreate: ViewCreate, options?: any): AxiosPromise<ViewRead> {
            return localVarFp.createViewSharespaceViewPost(viewCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Worklog
         * @param {WorklogCreate} worklogCreate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createWorklogSharespaceWorklogPost(worklogCreate: WorklogCreate, options?: any): AxiosPromise<WorklogRead> {
            return localVarFp.createWorklogSharespaceWorklogPost(worklogCreate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Delete Baseline Task Predecessor
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {string} predecessorId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete(baselineId: string, taskId: string, predecessorId: string, options?: any): AxiosPromise<string> {
            return localVarFp.deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete(baselineId, taskId, predecessorId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Baseline Predecessors
         * @param {string} baselineId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselinePredecessorsSharespaceBaselineBaselineIdPredecessorsGet(baselineId: string, options?: any): AxiosPromise<Array<BaselineTaskPredecessorRead>> {
            return localVarFp.getBaselinePredecessorsSharespaceBaselineBaselineIdPredecessorsGet(baselineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Baseline
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselineSharespaceBaselineIdGet(id: string, options?: any): AxiosPromise<BaselineRead> {
            return localVarFp.getBaselineSharespaceBaselineIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Baseline Task
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet(baselineId: string, taskId: string, options?: any): AxiosPromise<BaselineTaskRead> {
            return localVarFp.getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet(baselineId, taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Baseline Tasks
         * @param {string} baselineId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselineTasksSharespaceBaselineBaselineIdTasksGet(baselineId: string, options?: any): AxiosPromise<Array<BaselineTaskRead>> {
            return localVarFp.getBaselineTasksSharespaceBaselineBaselineIdTasksGet(baselineId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Baselines
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBaselinesSharespaceBaselinesGet(orderBy?: string, desc?: boolean, options?: any): AxiosPromise<Array<BaselineRead>> {
            return localVarFp.getBaselinesSharespaceBaselinesGet(orderBy, desc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Resource
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourceSharespaceResourceIdGet(id: string, options?: any): AxiosPromise<ResourceRead> {
            return localVarFp.getResourceSharespaceResourceIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Resources
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getResourcesSharespaceResourcesGet(orderBy?: string, desc?: boolean, options?: any): AxiosPromise<Array<ResourceRead>> {
            return localVarFp.getResourcesSharespaceResourcesGet(orderBy, desc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Task
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskSharespaceTaskIdGet(id: string, options?: any): AxiosPromise<TaskRead> {
            return localVarFp.getTaskSharespaceTaskIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Tasks
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTasksSharespaceTasksGet(orderBy?: string, desc?: boolean, options?: any): AxiosPromise<Array<TaskRead>> {
            return localVarFp.getTasksSharespaceTasksGet(orderBy, desc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserUserGet(options?: any): AxiosPromise<UserRead> {
            return localVarFp.getUserUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Users
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUsersUsersGet(options?: any): AxiosPromise<Array<UserRead>> {
            return localVarFp.getUsersUsersGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get View
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewSharespaceViewIdGet(id: string, options?: any): AxiosPromise<ViewRead> {
            return localVarFp.getViewSharespaceViewIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Views
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getViewsSharespaceViewsGet(orderBy?: string, desc?: boolean, options?: any): AxiosPromise<Array<ViewRead>> {
            return localVarFp.getViewsSharespaceViewsGet(orderBy, desc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Worklog
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorklogSharespaceWorklogIdGet(id: string, options?: any): AxiosPromise<WorklogRead> {
            return localVarFp.getWorklogSharespaceWorklogIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get Worklogs
         * @param {string} [orderBy] 
         * @param {boolean} [desc] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWorklogsSharespaceWorklogsGet(orderBy?: string, desc?: boolean, options?: any): AxiosPromise<Array<WorklogRead>> {
            return localVarFp.getWorklogsSharespaceWorklogsGet(orderBy, desc, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Health
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthHealthGet(options?: any): AxiosPromise<string> {
            return localVarFp.healthHealthGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch Baseline
         * @param {string} id 
         * @param {BaselineUpdate} baselineUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBaselineSharespaceBaselineIdPatch(id: string, baselineUpdate: BaselineUpdate, options?: any): AxiosPromise<BaselineRead> {
            return localVarFp.patchBaselineSharespaceBaselineIdPatch(id, baselineUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch Baseline Task
         * @param {string} baselineId 
         * @param {string} taskId 
         * @param {BaselineTaskUpdate} baselineTaskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch(baselineId: string, taskId: string, baselineTaskUpdate: BaselineTaskUpdate, options?: any): AxiosPromise<BaselineTaskRead> {
            return localVarFp.patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch(baselineId, taskId, baselineTaskUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch Resource
         * @param {string} id 
         * @param {ResourceUpdate} resourceUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchResourceSharespaceResourceIdPatch(id: string, resourceUpdate: ResourceUpdate, options?: any): AxiosPromise<ResourceRead> {
            return localVarFp.patchResourceSharespaceResourceIdPatch(id, resourceUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch Task
         * @param {string} id 
         * @param {TaskUpdate} taskUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchTaskSharespaceTaskIdPatch(id: string, taskUpdate: TaskUpdate, options?: any): AxiosPromise<TaskRead> {
            return localVarFp.patchTaskSharespaceTaskIdPatch(id, taskUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch User
         * @param {UserUpdate} userUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchUserUserPatch(userUpdate: UserUpdate, options?: any): AxiosPromise<UserRead> {
            return localVarFp.patchUserUserPatch(userUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch View
         * @param {string} id 
         * @param {ViewUpdate} viewUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchViewSharespaceViewIdPatch(id: string, viewUpdate: ViewUpdate, options?: any): AxiosPromise<ViewRead> {
            return localVarFp.patchViewSharespaceViewIdPatch(id, viewUpdate, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Patch Worklog
         * @param {string} id 
         * @param {WorklogUpdate} worklogUpdate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        patchWorklogSharespaceWorklogIdPatch(id: string, worklogUpdate: WorklogUpdate, options?: any): AxiosPromise<WorklogRead> {
            return localVarFp.patchWorklogSharespaceWorklogIdPatch(id, worklogUpdate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Create Baseline
     * @param {BaselineCreate} baselineCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBaselineSharespaceBaselinePost(baselineCreate: BaselineCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBaselineSharespaceBaselinePost(baselineCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Baseline Task Predecessor
     * @param {string} baselineId 
     * @param {string} taskId 
     * @param {string} predecessorId 
     * @param {BaselineTaskPredecessorCreate} baselineTaskPredecessorCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost(baselineId: string, taskId: string, predecessorId: string, baselineTaskPredecessorCreate: BaselineTaskPredecessorCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdPost(baselineId, taskId, predecessorId, baselineTaskPredecessorCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Baseline Task
     * @param {string} baselineId 
     * @param {string} taskId 
     * @param {BaselineTaskCreate} baselineTaskCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost(baselineId: string, taskId: string, baselineTaskCreate: BaselineTaskCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPost(baselineId, taskId, baselineTaskCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Resource
     * @param {ResourceCreate} resourceCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createResourceSharespaceResourcePost(resourceCreate: ResourceCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createResourceSharespaceResourcePost(resourceCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Task
     * @param {TaskCreate} taskCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTaskSharespaceTaskPost(taskCreate: TaskCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTaskSharespaceTaskPost(taskCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Token
     * @param {string} username 
     * @param {string} password 
     * @param {GrantType} [grantType] 
     * @param {string} [scope] 
     * @param {ClientId} [clientId] 
     * @param {ClientSecret} [clientSecret] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTokenTokenPost(username: string, password: string, grantType?: GrantType, scope?: string, clientId?: ClientId, clientSecret?: ClientSecret, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createTokenTokenPost(username, password, grantType, scope, clientId, clientSecret, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create User
     * @param {UserCreate} userCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createUserUserPost(userCreate: UserCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createUserUserPost(userCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create View
     * @param {ViewCreate} viewCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createViewSharespaceViewPost(viewCreate: ViewCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createViewSharespaceViewPost(viewCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Worklog
     * @param {WorklogCreate} worklogCreate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createWorklogSharespaceWorklogPost(worklogCreate: WorklogCreate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).createWorklogSharespaceWorklogPost(worklogCreate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Delete Baseline Task Predecessor
     * @param {string} baselineId 
     * @param {string} taskId 
     * @param {string} predecessorId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete(baselineId: string, taskId: string, predecessorId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteBaselineTaskPredecessorSharespaceBaselineBaselineIdTaskTaskIdPredecessorPredecessorIdDelete(baselineId, taskId, predecessorId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Baseline Predecessors
     * @param {string} baselineId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBaselinePredecessorsSharespaceBaselineBaselineIdPredecessorsGet(baselineId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBaselinePredecessorsSharespaceBaselineBaselineIdPredecessorsGet(baselineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Baseline
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBaselineSharespaceBaselineIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBaselineSharespaceBaselineIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Baseline Task
     * @param {string} baselineId 
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet(baselineId: string, taskId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdGet(baselineId, taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Baseline Tasks
     * @param {string} baselineId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBaselineTasksSharespaceBaselineBaselineIdTasksGet(baselineId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBaselineTasksSharespaceBaselineBaselineIdTasksGet(baselineId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Baselines
     * @param {string} [orderBy] 
     * @param {boolean} [desc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getBaselinesSharespaceBaselinesGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getBaselinesSharespaceBaselinesGet(orderBy, desc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Resource
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getResourceSharespaceResourceIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getResourceSharespaceResourceIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Resources
     * @param {string} [orderBy] 
     * @param {boolean} [desc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getResourcesSharespaceResourcesGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getResourcesSharespaceResourcesGet(orderBy, desc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Task
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTaskSharespaceTaskIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTaskSharespaceTaskIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Tasks
     * @param {string} [orderBy] 
     * @param {boolean} [desc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTasksSharespaceTasksGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTasksSharespaceTasksGet(orderBy, desc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserUserGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUserUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Users
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUsersUsersGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getUsersUsersGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get View
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getViewSharespaceViewIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getViewSharespaceViewIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Views
     * @param {string} [orderBy] 
     * @param {boolean} [desc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getViewsSharespaceViewsGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getViewsSharespaceViewsGet(orderBy, desc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Worklog
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorklogSharespaceWorklogIdGet(id: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWorklogSharespaceWorklogIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Get Worklogs
     * @param {string} [orderBy] 
     * @param {boolean} [desc] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getWorklogsSharespaceWorklogsGet(orderBy?: string, desc?: boolean, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getWorklogsSharespaceWorklogsGet(orderBy, desc, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Health
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public healthHealthGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).healthHealthGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch Baseline
     * @param {string} id 
     * @param {BaselineUpdate} baselineUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchBaselineSharespaceBaselineIdPatch(id: string, baselineUpdate: BaselineUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchBaselineSharespaceBaselineIdPatch(id, baselineUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch Baseline Task
     * @param {string} baselineId 
     * @param {string} taskId 
     * @param {BaselineTaskUpdate} baselineTaskUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch(baselineId: string, taskId: string, baselineTaskUpdate: BaselineTaskUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchBaselineTaskSharespaceBaselineBaselineIdTaskTaskIdPatch(baselineId, taskId, baselineTaskUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch Resource
     * @param {string} id 
     * @param {ResourceUpdate} resourceUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchResourceSharespaceResourceIdPatch(id: string, resourceUpdate: ResourceUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchResourceSharespaceResourceIdPatch(id, resourceUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch Task
     * @param {string} id 
     * @param {TaskUpdate} taskUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchTaskSharespaceTaskIdPatch(id: string, taskUpdate: TaskUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchTaskSharespaceTaskIdPatch(id, taskUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch User
     * @param {UserUpdate} userUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchUserUserPatch(userUpdate: UserUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchUserUserPatch(userUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch View
     * @param {string} id 
     * @param {ViewUpdate} viewUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchViewSharespaceViewIdPatch(id: string, viewUpdate: ViewUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchViewSharespaceViewIdPatch(id, viewUpdate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Patch Worklog
     * @param {string} id 
     * @param {WorklogUpdate} worklogUpdate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public patchWorklogSharespaceWorklogIdPatch(id: string, worklogUpdate: WorklogUpdate, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).patchWorklogSharespaceWorklogIdPatch(id, worklogUpdate, options).then((request) => request(this.axios, this.basePath));
    }
}



